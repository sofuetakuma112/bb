// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    email                 String?        @unique
    emailVerified         DateTime?
    image                 String?
    imageS3Key            String?
    accounts              Account[]
    sessions              Session[]
    id                    String         @id @default(cuid())
    createdAt             DateTime       @default(now()) @map("created_at")
    updatedAt             DateTime       @updatedAt @map("updated_at")
    name                  String?
    posts                 Post[]
    receivedNotifications Notification[] @relation("UserNotifications")
    sentNotifications     Notification[] @relation("NotifierNotifications")
    likes                 Like[]
    followers             Follow[]       @relation("asFollowee")
    followees             Follow[]       @relation("asFollower")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Post {
    id              String         @id @default(dbgenerated("uuid_generate_v4()"))
    prompt          String
    imageS3Key      String?        @map("image_s3_key")
    analysisScore   Float?         @map("analysis_score")
    analysisResult  Boolean?       @map("analysis_result")
    modelVersion    String?        @map("model_version")
    hashTags        Json?          @map("hash_tags")
    imageName       String         @map("image_name")
    imageAge        String         @map("image_age")
    imageBirthplace String?        @map("image_birthplace")
    createdAt       DateTime       @default(now()) @map("created_at")
    updatedAt       DateTime       @updatedAt @map("updated_at")
    userId          String         @map("user_id")
    user            User           @relation(fields: [userId], references: [id])
    likes           Like[]
    notifications   Notification[]
}

model Like {
    id        String   @id @default(dbgenerated("uuid_generate_v4()"))
    likeType  LikeType @map("like_type")
    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")
    userId    String   @map("user_id")
    postId    String   @map("post_id")
    user      User     @relation(fields: [userId], references: [id])
    post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Follow {
    id         String   @id @default(dbgenerated("uuid_generate_v4()"))
    createdAt  DateTime @default(now()) @map("created_at")
    updatedAt  DateTime @updatedAt @map("updated_at")
    followerId String   @map("follower_id")
    followeeId String   @map("followee_id")
    follower   User     @relation(name: "asFollower", fields: [followerId], references: [id])
    followee   User     @relation(name: "asFollowee", fields: [followeeId], references: [id])
}

model Notification {
    id               String           @id @default(dbgenerated("uuid_generate_v4()"))
    notificationType NotificationType @map("notification_type")
    read             Boolean          @default(false)
    createdAt        DateTime         @default(now()) @map("created_at")
    updatedAt        DateTime         @updatedAt @map("updated_at")
    userId           String           @map("user_id")
    notifierUserId   String           @map("notifier_user_id")
    postId           String?          @map("post_id")
    user             User             @relation(name: "UserNotifications", fields: [userId], references: [id])
    notifierUser     User             @relation(name: "NotifierNotifications", fields: [notifierUserId], references: [id])
    post             Post?            @relation(fields: [postId], references: [id], onDelete: Cascade)
}

enum LikeType {
    like
    super_like
    unlike
}

enum NotificationType {
    like
    super_like
    follow
}
